   check-for-build.run()
      check-for-build.legacySCM(groovy.lang.Closure)
      check-for-build.library({identifier=jenkins@20211123, retriever=null})
      check-for-build.pipeline(groovy.lang.Closure)
         check-for-build.alwaysPull(true)
         check-for-build.alwaysPull(true)
         check-for-build.echo(Executing on agent [label:none])
         check-for-build.parameterizedCron(
            H/10 * * * * %INPUT_MANIFEST=1.3.0/opensearch-1.3.0.yml;TARGET_JOB_NAME=petern-distribution-build-opensearch
            H/10 * * * * %INPUT_MANIFEST=1.3.0/opensearch-dashboards-1.3.0.yml;TARGET_JOB_NAME=petern-distribution-build-opensearch-dashboards
            H 1 * * * %INPUT_MANIFEST=2.0.0/opensearch-2.0.0.yml;TARGET_JOB_NAME=petern-distribution-build-opensearch
            H 1 * * * %INPUT_MANIFEST=2.0.0/opensearch-dashboards-2.0.0.yml;TARGET_JOB_NAME=petern-distribution-build-opensearch-dashboards
        )
         check-for-build.stage(detect docker image + args, groovy.lang.Closure)
            check-for-build.echo(Executing on agent [docker:[args:, containerPerStageRoot:false, label:Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, image:opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028, reuseNode:false, binding:groovy.lang.Binding@113909a6, stages:[:]]])
            check-for-build.script(groovy.lang.Closure)
               check-for-build.detectDockerAgent()
                  detectDockerAgent.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                  detectDockerAgent.legacySCM(groovy.lang.Closure)
                  detectDockerAgent.library({identifier=jenkins@20211123, retriever=null})
                  detectDockerAgent.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  detectDockerAgent.echo(Using Docker image opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028 (-e JAVA_HOME=/opt/java/openjdk-11))
         check-for-build.stage(trigger-build-if-needed, groovy.lang.Closure)
            check-for-build.echo(Executing on agent [docker:[containerPerStageRoot:false, label:Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host, reuseNode:false, binding:groovy.lang.Binding@113909a6, stages:[:]]])
            check-for-build.script(groovy.lang.Closure)
               check-for-build.lock({resource=CheckForBuild-../tests/jenkins/data/opensearch-1.3.0.yml-distribution-build-opensearch, skipIfLocked=true}, groovy.lang.Closure)
                  check-for-build.getManifestSHA({jobName=distribution-build-opensearch})
                     getManifestSHA.buildManifest({jobName=distribution-build-opensearch, manifest=manifests/../tests/jenkins/data/opensearch-1.3.0.yml, lock=true})
                        buildManifest.sh(./build.sh manifests/../tests/jenkins/data/opensearch-1.3.0.yml --lock)
                     getManifestSHA.sha1(manifests/../tests/jenkins/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA: sha1)
                     getManifestSHA.legacySCM(groovy.lang.Closure)
                     getManifestSHA.library({identifier=jenkins@20211123, retriever=null})
                     getManifestSHA.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml.lock})
                     InputManifest.asBoolean()
                     InputManifest.getSHAsRoot(distribution-build-opensearch)
                     getManifestSHA.echo(Manifest lock: manifests/../tests/jenkins/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA path: distribution-build-opensearch/1.3.0/shas/sha1.yml)
                     getManifestSHA.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        getManifestSHA.s3DoesObjectExist({bucket=artifact-bucket, path=distribution-build-opensearch/1.3.0/shas/sha1.yml})
                     getManifestSHA.echo(Manifest SHA exists: true)
                  check-for-build.echo(Skipping, distribution-build-opensearch/1.3.0/shas/sha1.yml already exists.)
         check-for-build.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
