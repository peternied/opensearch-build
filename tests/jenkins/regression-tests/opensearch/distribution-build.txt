   distribution-build.run()
      distribution-build.legacySCM(groovy.lang.Closure)
      distribution-build.library({identifier=jenkins@20211123, retriever=null})
      distribution-build.pipeline(groovy.lang.Closure)
         distribution-build.alwaysPull(true)
         distribution-build.alwaysPull(true)
         distribution-build.alwaysPull(true)
         distribution-build.alwaysPull(true)
         distribution-build.echo(Executing on agent [label:none])
         distribution-build.stage(detect docker image + args, groovy.lang.Closure)
            distribution-build.echo(Executing on agent [docker:[args:, containerPerStageRoot:false, label:Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, image:opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028, reuseNode:false, binding:groovy.lang.Binding@40259a19, stages:[:]]])
            distribution-build.script(groovy.lang.Closure)
               distribution-build.detectDockerAgent()
                  detectDockerAgent.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                  detectDockerAgent.legacySCM(groovy.lang.Closure)
                  detectDockerAgent.library({identifier=jenkins@20211123, retriever=null})
                  detectDockerAgent.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  detectDockerAgent.echo(Using Docker image opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211028 (-e JAVA_HOME=/opt/java/openjdk-11))
         distribution-build.stage(build-snapshot, groovy.lang.Closure)
            distribution-build.echo(Executing on agent [docker:[containerPerStageRoot:false, label:Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, reuseNode:false, binding:groovy.lang.Binding@40259a19, stages:[:]]])
            distribution-build.script(groovy.lang.Closure)
               distribution-build.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
               distribution-build.buildManifest({snapshot=true})
                  buildManifest.sh(./build.sh manifests/../tests/jenkins/data/opensearch-1.3.0.yml --snapshot)
         distribution-build.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         distribution-build.stage(build-x64, groovy.lang.Closure)
            distribution-build.echo(Executing on agent [docker:[containerPerStageRoot:false, label:Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, reuseNode:false, binding:groovy.lang.Binding@40259a19, stages:[:]]])
            distribution-build.script(groovy.lang.Closure)
               distribution-build.buildAssembleUpload()
                  buildAssembleUpload.legacySCM(groovy.lang.Closure)
                  buildAssembleUpload.library({identifier=jenkins@20211123, retriever=null})
                  buildAssembleUpload.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  buildAssembleUpload.buildManifest({})
                     buildManifest.sh(./build.sh manifests/../tests/jenkins/data/opensearch-1.3.0.yml)
                  buildAssembleUpload.assembleUpload({manifest=builds/opensearch/manifest.yml})
                     assembleUpload.legacySCM(groovy.lang.Closure)
                     assembleUpload.library({identifier=jenkins@20211123, retriever=null})
                     assembleUpload.assembleManifest({manifest=builds/opensearch/manifest.yml})
                        assembleManifest.legacySCM(groovy.lang.Closure)
                        assembleManifest.library({identifier=jenkins@20211123, retriever=null})
                        assembleManifest.readYaml({file=builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                        assembleManifest.sh(./assemble.sh "builds/opensearch/manifest.yml" --base-url https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64)
                     assembleUpload.uploadArtifacts({manifest=builds/opensearch/manifest.yml})
                        uploadArtifacts.legacySCM(groovy.lang.Closure)
                        uploadArtifacts.library({identifier=jenkins@20211123, retriever=null})
                        uploadArtifacts.readYaml({file=builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getArtifactRoot(vars-build, 33)
                        uploadArtifacts.echo(Uploading to s3://artifact-bucket/vars-build/1.1.0/33/linux/x64)
                        uploadArtifacts.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                           uploadArtifacts.s3Upload({file=builds, bucket=artifact-bucket, path=vars-build/1.1.0/33/linux/x64/builds})
                           uploadArtifacts.s3Upload({file=dist, bucket=artifact-bucket, path=vars-build/1.1.0/33/linux/x64/dist})
                        BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                        Messages.asBoolean()
                        Messages.add(stage, https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml)
                           uploadArtifacts.writeFile({file=messages/stage.msg, text=https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml})
                           uploadArtifacts.stash({includes=messages/*, name=messages-stage})
                     assembleUpload.readYaml({file=builds/opensearch/manifest.yml})
                     InputManifest.asBoolean()
                     assembleUpload.readYaml({file=builds/opensearch/manifest.yml})
                     BuildManifest.asBoolean()
                     InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, x64)
                     assembleUpload.echo(Setting env."ARTIFACT_URL_linux_x64"=https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/opensearch-1.1.0-linux-x64.tar.gz)
         distribution-build.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         distribution-build.stage(build-arm64, groovy.lang.Closure)
            distribution-build.echo(Executing on agent [docker:[containerPerStageRoot:false, label:Jenkins-Agent-al2-arm64-c6g4xlarge-Docker-Host, reuseNode:false, binding:groovy.lang.Binding@40259a19, stages:[:]]])
            distribution-build.script(groovy.lang.Closure)
               distribution-build.buildAssembleUpload()
                  buildAssembleUpload.legacySCM(groovy.lang.Closure)
                  buildAssembleUpload.library({identifier=jenkins@20211123, retriever=null})
                  buildAssembleUpload.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  buildAssembleUpload.buildManifest({})
                     buildManifest.sh(./build.sh manifests/../tests/jenkins/data/opensearch-1.3.0.yml)
                  buildAssembleUpload.assembleUpload({manifest=builds/opensearch/manifest.yml})
                     assembleUpload.legacySCM(groovy.lang.Closure)
                     assembleUpload.library({identifier=jenkins@20211123, retriever=null})
                     assembleUpload.assembleManifest({manifest=builds/opensearch/manifest.yml})
                        assembleManifest.legacySCM(groovy.lang.Closure)
                        assembleManifest.library({identifier=jenkins@20211123, retriever=null})
                        assembleManifest.readYaml({file=builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                        assembleManifest.sh(./assemble.sh "builds/opensearch/manifest.yml" --base-url https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64)
                     assembleUpload.uploadArtifacts({manifest=builds/opensearch/manifest.yml})
                        uploadArtifacts.legacySCM(groovy.lang.Closure)
                        uploadArtifacts.library({identifier=jenkins@20211123, retriever=null})
                        uploadArtifacts.readYaml({file=builds/opensearch/manifest.yml})
                        BuildManifest.asBoolean()
                        BuildManifest.getArtifactRoot(vars-build, 33)
                        uploadArtifacts.echo(Uploading to s3://artifact-bucket/vars-build/1.1.0/33/linux/x64)
                        uploadArtifacts.withAWS({role=opensearch-bundle, roleAccount=account, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                           uploadArtifacts.s3Upload({file=builds, bucket=artifact-bucket, path=vars-build/1.1.0/33/linux/x64/builds})
                           uploadArtifacts.s3Upload({file=dist, bucket=artifact-bucket, path=vars-build/1.1.0/33/linux/x64/dist})
                        BuildManifest.getArtifactRootUrl(https://ci.opensearch.org/dbc, vars-build, 33)
                        Messages.asBoolean()
                        Messages.add(stage, https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml)
                           uploadArtifacts.writeFile({file=messages/stage.msg, text=https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/builds/opensearch/manifest.yml
https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/manifest.yml})
                           uploadArtifacts.stash({includes=messages/*, name=messages-stage})
                     assembleUpload.readYaml({file=builds/opensearch/manifest.yml})
                     InputManifest.asBoolean()
                     assembleUpload.readYaml({file=builds/opensearch/manifest.yml})
                     BuildManifest.asBoolean()
                     InputManifest.getPublicDistUrl(https://ci.opensearch.org/dbc, vars-build, 33, linux, x64)
                     assembleUpload.echo(Setting env."ARTIFACT_URL_linux_x64"=https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/opensearch-1.1.0-linux-x64.tar.gz)
         distribution-build.postCleanup()
            postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
         distribution-build.stage(docker build, groovy.lang.Closure)
            distribution-build.node(Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, groovy.lang.Closure)
               distribution-build.script(groovy.lang.Closure)
                  distribution-build.buildDockerImage()
                     buildDockerImage.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     buildDockerImage.legacySCM(groovy.lang.Closure)
                     buildDockerImage.library({identifier=jenkins@20211123, retriever=null})
                     buildDockerImage.readYaml({file=manifests/../tests/jenkins/data/opensearch-1.3.0.yml})
                     InputManifest.asBoolean()
                     buildDockerImage.echo(filename: opensearch)
                     buildDockerImage.echo(x64TarGz: https://ci.opensearch.org/dbc/vars-build/1.1.0/33/linux/x64/dist/opensearch/opensearch-1.1.0-linux-x64.tar.gz)
                     buildDockerImage.echo(arm64TarGz: null)
                     buildDockerImage.echo(Skipping docker build, one of x64 or arm64 artifacts was not built.)
         distribution-build.node(Jenkins-Agent-al2-x64-c54xlarge-Docker-Host, groovy.lang.Closure)
            distribution-build.script(groovy.lang.Closure)
               Messages.asBoolean()
               Messages.get([build-x64, build-arm64])
                  distribution-build.unstash({name=messages-build-x64})
                  distribution-build.unstash({name=messages-build-arm64})
                  distribution-build.findFiles({excludes=, glob=messages/*})
                  distribution-build.dir(messages, groovy.lang.Closure)
                     distribution-build.deleteDir()
               distribution-build.publishNotification({icon=:white_check_mark:, message=Successful Build, extra=, credentialsId=BUILD_NOTICE_WEBHOOK, manifest=../tests/jenkins/data/opensearch-1.3.0.yml})
                  publishNotification.string({credentialsId=BUILD_NOTICE_WEBHOOK, variable=WEBHOOK_URL})
                  publishNotification.withCredentials([WEBHOOK_URL], groovy.lang.Closure)
                     publishNotification.sh(curl -XPOST --header "Content-Type: application/json" --data '{"result_text":":white_check_mark: vars-build [33] Successful Build
Build: http://jenkins.us-east-1.elb.amazonaws.com/job/vars/42
../tests/jenkins/data/opensearch-1.3.0.yml
"}' "http://slack-notification-webhook")
               distribution-build.postCleanup()
                  postCleanup.cleanWs({disableDeferredWipeout=true, deleteDirs=true})
