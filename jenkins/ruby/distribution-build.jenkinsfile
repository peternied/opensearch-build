lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    agent none
    parameters {
        string(
            name: 'REPOSITORY',
            description: 'Repository to release, e.g. https://github.com/opensearch-project/opensearch-ruby.git',
            require: true,
            trim: true
        ),
        string(
            name: 'RELEASE_BRANCH',
            description: 'Branch name to release, e.g. 1.2.0',
            require: true,
            trim: true
        ),
        string(
            name: 'RUBY_INTERPRETER',
            description: 'ruby, jruby, etc',
            default: 'ruby',
            trim: true
        ),
    }
    stages {
        stage('ruby-build-sign-upload') {
            agent {
                docker {
                    label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
                    image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211130'
                    alwaysPull true
                }
            }
            steps {
                script {
                    git url: "$REPOSITORY", branch: "$RELEASE_BRANCH"
                    withCredentials([string(credentialsId: 'opensearchproject-rubygems-private-key', variable: 'RUBYGEMS_PRIVATE_KEY')]) {
                        writeFile file: 'gem-private_key.pem', text: RUBYGEMS_PRIVATE_KEY
                    }
                    sh'''
                        rvm install $RUBY_INTERPRETER
                        rvm use $RUBY_INTERPRETER
                        gem cert --add certs/opensearch-rubygems.pem
                        bash build.sh
                    '''
                    artifacts_path = [
                        "${JOB_NAME}",
                        sh('basename `git rev-parse --show-toplevel`'), // name of the repository
                        "${RELEASE_BRANCH}",
                        "${BUILD_NUMBER}",
                        "builds"
                    ].join('/'))
                    withAWS(role: 'opensearch-bundle', roleAccount: "${AWS_ACCOUNT_PUBLIC}", duration: 900, roleSessionName: 'jenkins-session') {
                        s3Upload(file: 'builds', bucket: "${ARTIFACT_BUCKET_NAME}", path: "${artifacts_path}")
                    }
                    lib.jenkins.Messages.new(this).add("${STAGE_NAME}", "Built artifacts into ${PUBLIC_ARTIFACT_URL}/${artifacts_path}.")
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    },
    post {
        success {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['ruby-build-sign-upload'])

                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Successful Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                        extra: stashed,
                    )

                    postCleanup()
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-c54xlarge-Docker-Host') {
                script {
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Build',
                        credentialsId: 'BUILD_NOTICE_WEBHOOK',
                    )

                    postCleanup()
                }
            }
        }
    }
}
